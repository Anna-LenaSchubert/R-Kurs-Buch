[["erste-schritte.html", "2 Erste Schritte 2.1 Variablen 2.2 Vektoren 2.3 Auswahl von Vektorelementen 2.4 Logische Vergleiche", " 2 Erste Schritte 2.1 Variablen Sicherlich wollen Sie Ihre Daten nicht nur in der Konsole ausgeben lassen und bearbeiten, sondern auch in Variablen speichern. Variablen sind Bezeichnungen, mit deren Hilfe Sie auf gespeicherte Daten zugreifen. Sobald eine Variable definiert wurde, können Sie immer wieder darauf zugreifen. Variablen werden mit Hilfe des &lt;- Operators definiert. # Hier werden zwei Variablen - x und y - definiert x &lt;- 2 y &lt;- 3 Sie können sich die Werte dieser Variablen ausgeben lassen, indem Sie die Variablennamen in der Konsole eingeben und Enter drücken. x ## [1] 2 Jetzt können Sie bereits erste Berechnungen mit Variablen durchführen: x+y ## [1] 5 x*y ## [1] 6 In R lassen sich sämtliche Objekte - nicht nur einzelne Zahlen, sondern auch Datentabellen, Wortlisten oder sogar Ergebnisse komplizierter Analysen - in Variablen speichern. Der Workflow ist so ausgelegt, dass Sie Ergebnisse einer Analyse in einer Variable speichern und von dort aus weiterverarbeiten können, z.B. um APA-konforme Tabellen oder Grafiken zu erstellen oder sich Effektstärkemaße ausgeben zu lassen. Im weiteren Verlauf des Kurses lernen Sie andere Datentypen kennen, die in Variablen gespeichert werden können. Achtung: Wenn Sie eine Berechnung mit einer Variable durchführen und das Ergebnis dieser Berechnung speichern möchten, müssen Sie es wieder eine Variable zuweisen - es wird nicht automatisch gespeichert! z &lt;- x*10 Wenn Sie sich jetzt x und z ausgeben lassen, sehen Sie, dass sich nichts an x geändert hat - das Ergebnis der Berechnung wurde nicht abgespeichert. In der Variable z hingegen sehen Sie das Ergebnis Ihrer Berechnung. x ## [1] 2 z ## [1] 20 x, y und z sind denkbar schlechte Variablennamen! Gute Variablennamen sprechen, d.h. dass der Name eine Variable verrät, was sich in dieser Variable verbirgt. Deswegen sollten Sie sich immer bemühen, möglichst klare und eindeutige Variablennamen zu vergeben. # Beispiele für gute Variablennamen durchschnittliches_Alter &lt;- 23 MW_Alter &lt;- 23 durchschnittliches_Evaluationsergebnis_KursA &lt;- 2 MW_Evaluationsergebnis_KursA &lt;- 2 Scheuen Sie sich nicht vor langen Variablennamen! Je besser und klarer Sie Ihre Variablen definieren, desto einfacher wird es sowohl Ihnen als auch anderen fallen, Ihren Code nachzuvollziehen. Besonders einfach lesbar sind längere Variablennamen, wenn Sie unterschiedliche Elemente des Variablennamens mit einem Unterstrich trennen. Diese Konvention wird auch in diesem Kurs verwendet. 2.2 Vektoren Jede Spalte eines Datensatzes ist ein Vektor. In einem Vektor befinden sich mehrere Elemente eines Datentyps, also z.B. mehrere Zahlen oder mehrere Wörter. Vektoren werden mit Hilfe des combine-Operators c erstellt. Vektor_numeric &lt;- c(1, 2, 3, 4, 5, 6:10) Mit jedem Datentyp können Sie unterschiedliche Operationen durchführen. Um sich den Datentyp eines Vektors anzeigen zu lassen, können Sie die Funktion mode verwenden. mode(Vektor_numeric) ## [1] &quot;numeric&quot; 2.2.1 Datentyp numeric Mit Vektoren vom Typ numeric können Sie verschiedene mathematische Operationen durchführen. Sie können diese Vektoren addieren, multiplizieren, usw. Wenn Sie eine Operation wie *2 auf den Vektor anwenden, wird diese Operation auf alle Elemente des Vektors angewendet. Vektor_numeric*2 ## [1] 2 4 6 8 10 12 14 16 18 20 Wenn Sie hingegen zwei gleich lange Vektoren haben, wird jedes i-te Element des ersten Vektors mit dem i-ten Element des zweiten Vektors verrechnet. Das Element an Position 1 im einen Vektor wird dann mit dem Element an Position 1 im anderen Vektor gepaart, das Element an Position 2 im einen Vektor mit dem Element an Position 2 im anderen Vektor  und so weiter. punkte_MC_Fragen &lt;- c(5, 2, 2, 4, 3, 2, 1, 0, 1, 4) punkte_offene_Fragen &lt;- c(3, 4, 5, 0, 2, 3, 1, 3, 5, 1) klausurergebnis &lt;- punkte_MC_Fragen + punkte_offene_Fragen klausurergebnis ## [1] 8 6 7 4 5 5 2 3 6 5 2.2.2 Datentyp character Wenn Sie in einer Variable Text abspeichern wollen, erschaffen Sie eine Variable vom Datentyp character. Test wird mit doppelten oder einfachen Anführungszeichen angegeben: &quot;Alpha&quot; ## [1] &quot;Alpha&quot; &#39;Beta&#39; ## [1] &quot;Beta&quot; Vektor_character &lt;- c(&quot;Lea&quot;, &quot;Luke&quot;, &quot;Han&quot;, &quot;Chewy&quot;) mode(Vektor_character) ## [1] &quot;character&quot; Mit Vektoren des Typs character können Sie natürlich keine mathematischen Operationen durchführen. Sie sind aber nützlich, um bestimmte Daten zu kodieren, wie bspw. das Geschlecht oder das Studienfach von Versuchspersonen. Geschlecht &lt;- c(&quot;männlich&quot;, &quot;weiblich&quot;, &quot;weiblich&quot;, &quot;divers&quot;, &quot;weiblich&quot;) Studienfach &lt;- c(&quot;Psychologie&quot;, &quot;Medizin&quot;, &quot;Informatik&quot;, &quot;Sportwissenschaft&quot;, &quot;Biologie&quot;) 2.2.3 Datentyp logical Der Datentyp logical kodiert nur binäre Informationen - diese sind entweder TRUE oder FALSE. TRUE ## [1] TRUE FALSE ## [1] FALSE Vektor_logical &lt;- c(TRUE, TRUE, FALSE, TRUE) mode(Vektor_logical) ## [1] &quot;logical&quot; Dabei werden TRUE und FALSE als logische Bedingungen interpretiert, die erfüllt oder nicht erfüllt sein können. Vektoren dieses Datentyps sind für die Datenaufbereitung unglaublich nützlich! Mit Hilfe eines Vektors vom Typ logical können sie beispielsweise kodieren, welche Versuchspersonen die Studie vollständig abgeschlossen haben oder ob einzelne Beobachtungen Ausreißer darstellen. Sie werden diesen Datentyp häufig benötigen, wenn Sie in Datentabellen einzelne Fälle auswählen oder Versuchspersonen ausschließen möchte. Hierbei wird dann jeweils im Einzelfall überprüft, welche Fälle eine gewünschte Bedingung erfüllen (z.B. maximal 30 Minuten zur Bearbeitung eines Tests gebraucht haben) und daher in den weiteren Analysen eingeschlossen werden. # Hier wird festgehalten, welche Versuchspersonen (id) die Studie # vollständig abgeschlossen haben (Studie_abgeschlossen) id &lt;- c(1:10) Studie_abgeschlossen &lt;- c(TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE) Mit logischen Werten kann man die logischen Operationen UND (&amp;), ODER (| ) und NICHT (! ) umsetzen. UND und ODER verknüpfen jeweils zwei logische Bedingungen (sprich: zwei logische Werte, also TRUE/FALSE) miteinander und geben selbst einen logischen Wert zurück. Die Verknüpfung UND ergibt dann TRUE, wenn beide Bedingungen erfüllt sind, d.h. nur wenn die erste und die zweite Bedingung jeweils TRUE sind. ## Logisches UND TRUE &amp; TRUE ## [1] TRUE TRUE &amp; FALSE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE einen logischen Wert zurück. Die Verknüpfung ODER ergibt dann TRUE, wenn mindestens eine der beiden Bedingungen erfüllt ist, d.h. wenn die erste oder die zweite Bedingung oder beide Bedingungen TRUE sind. Ganz wichtig: ODER gibt auch dann TRUE aus, wenn beide Bedingungen erfüllt sind! ## Logisches ODER TRUE | TRUE ## [1] TRUE TRUE | FALSE ## [1] TRUE FALSE | FALSE ## [1] FALSE Das logische NICHT invertiert eine logische Variable: Aus TRUE wird FALSE und umgekehrt. Das ist hier noch etwas abstrakt, wird aber später in den Kapiteln zur Datenaufbereitung noch klarer. ## Logisches NICHT !TRUE ## [1] FALSE !FALSE ## [1] TRUE 2.2.4 Datentyp factor Variablen vom Datentyp factor sind nützlich, um kategoriale Variablen zu kodieren. Dabei wird zunächst ein Vektor vom Typ numeric erstellt. Den einzelnen Werten dieses numerischen Vektors werden dann kategoriale Bezeichnungen zugewiesen. Bedingung &lt;- c (0, 1, 1, 0, 1, 0, 0, 1) Vektor_factor &lt;- factor(x = Bedingung, levels = c(0,1), labels = c(&quot;Kontrollgruppe&quot;, &quot;Experimentalgruppe&quot;)) Vektor_factor ## [1] Kontrollgruppe Experimentalgruppe Experimentalgruppe Kontrollgruppe ## [5] Experimentalgruppe Kontrollgruppe Kontrollgruppe Experimentalgruppe ## Levels: Kontrollgruppe Experimentalgruppe mode(Vektor_factor) ## [1] &quot;numeric&quot; Dazu verwenden Sie die Funktion factor. Dieser Funktion übergeben Sie den numerischen Vektor Bedingung und definieren anschließend die Stufen des Faktors mit Hilfe des Argument levels (hier 0 und 1) sowie die Bezeichnungen mit Hilfe des Argument labels (hier Kontrollgruppe und Experimentalgruppe). Es ist immer sinnvoll, Variablen als Faktoren zu definieren, wenn sie endliche Ausprägungen haben. Experimentelle Bedingungen, Messzeitpunkte oder das Geschlecht von Versuchspersonen sind typische Kandidaten, die als Vektoren vom Typ factor gespeichert werden. Der Vorteil dieses Variablentyps besteht darin, dass Sie dort die Zuordnung von numerischen zu verbalen Bezeichnungen direkt vornehmen können und nachher nicht mehr nachschlagen müssen, ob 0 oder 1 nun die Experimentalgruppe kodiert. Spätestens bei der Auswertung Ihrer Daten sollten Sie solche Variablen also immer als factor rekodieren. Achtung: Sie können mit Faktoren keine mathematischen Operationen durchführen, auch wenn ihnen eigentlich numerische Kodierungen zugrunde liegen. In R werden Vektoren vom Variablentyp factor diesbezüglich ebenso wie Vektoren vom Variablentyp character behandelt. 2.2.5 Datentyp NA Ein Vektor besteht in der Regel nicht nur aus Variablen vom Datentyp NA. In echten Datensätzen werden Sie aber immer mal wieder fehlende Daten haben. Diese werden in R als NA kodiert. alter &lt;- c (21, 25, 29, 24, NA, 19, 23, 24, 20) Achtung: In anderer Statistiksoftware wie z.B. SPSS hat sich die Konvention entwickelt, fehlende Werte nicht mit NA, sondern mit bestimmten nicht beobachtbaren numerischen Werten wie -9 oder -99 zu beschreiben. Wenn Sie mit einem solchen Datensatz arbeiten, der zuvor in einer anderen Statistiksoftware bearbeitet wurde, sollten Sie immer überprüfen, ob fehlende Werte anhand solcher numerischen Werte kodiert sind und diese als NA rekodieren. 2.3 Auswahl von Vektorelementen Sie können auf einzelne Elemente eines Vektor zugreifen, indem Sie den Operator [] verwenden. In die eckigen Klammern wird die Position des Elements eingefügt, das Sie auswählen möchte. Dieses Vorgehen wird Indizierung genannt. daten &lt;- c (3, 7, 9, 0, 1, 1, 4, 5) daten[3] ## [1] 9 # Hier wird das dritte Element ausgewählt Sie können auch eine sogenannte Negativindizierung durchführen, d.h. im Index festhalten, welches Element Sie nicht auswählen möchten. daten[-3] ## [1] 3 7 0 1 1 4 5 # Hier werden alle Elemente außer des dritten ausgewählt Selbstverständlich können Sie auch gleich mehrere Elemente auswählen. Wenn Sie z.B. alles vom zweiten bis fünften Element auswählen wollen, können Sie das im Index so vermerken: [2:5]. Ganz allgemein gilt: Die Zahl vor dem Doppelpunkt gibt an, wo die Indizierung beginnt, und die Zahl nach dem Doppelpunkt gibt an, wo die Indizierung endet. daten[2:5] ## [1] 7 9 0 1 # Hier werden die Elemente 2, 3, 4 und 5 ausgewählt Wenn Sie mehrere Elemente auswählen möchten, die nicht direkt nebeneinander stehen, müssen Sie diese mit dem combine-Operator c verknüpfen: daten[c(2, 7)] ## [1] 7 4 # Hier werden die Elemente 2 und 7 ausgewählt Die so ausgewählten Daten können Sie natürlich wieder in einer neuen Variable speichern: ausgewaehlte_daten &lt;- daten[c(2, 7)] 2.4 Logische Vergleiche Logische Vergleiche können genutzt werden, um bestimmte Fälle - z.B. einzelne Versuchspersonen - auszuwählen. Welche logischen Vergleich für einen Datentyp sinnvoll sind, hängt von diesem Datentyp ab. 2.4.1 Datentyp numeric Wenn Sie Daten vom Typ numeric haben, können Sie numerische Vergleiche durchführen. Sie können zum Beispiel überprüfen, welche Ihrer Versuchspersonen älter als 18 Jahre sind. Dazu verwenden Sie den logischen Operator &gt;=, den Sie als größer oder gleich interpretieren können (analog dazu liest sich &lt;= als kleiner oder gleich.) alter &lt;- c(20, 21, 24, 25, 32, 17, 65, 22) alter &gt;= 18 ## [1] TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE Bei numerischen Vektoren können Sie folgende logischen Vergleiche durchführen: (a) gleich (==), (b) größer (&gt;), (c) kleiner (&lt;), (d) größer gleich (&gt;=), (e) kleiner gleich (&lt;=) oder (f) ungleich (!=). Wenn Sie einen logischen Vergleich mit einem gesamten Vektor durchführen, wird für jedes einzelne Element überprüft, ob es der logischen Bedingung entspricht (TRUE) oder nicht (FALSE). # Hier überprüfen wir, welche Versuchspersonen jünger als 18 Jahre sind alter &lt; 18 ## [1] FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE # Wir können auch überprüfen, welche Versuchspersonen genau 18 Jahre sind alter == 18 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 2.4.2 Datentyp character Vektoren vom Typ character lassen sich darauf überprüfen, ob diese identisch mit einer bestimmten Bedingung sind. # Hier wird überprüft, welche Versuchspersonen Psychologie studieren Studienfach &lt;- c(&quot;Psychologie&quot;, &quot;Medizin&quot;, &quot;Informatik&quot;, &quot;Sportwissenschaft&quot;, &quot;Biologie&quot;) Studienfach == &quot;Psychologie&quot; ## [1] TRUE FALSE FALSE FALSE FALSE 2.4.3 Datentyp factor Dieser logische Vergleich lässt sich auch mit Daten vom Typ factor durchführen. Bedingung &lt;- c (0, 1, 1, 0, 1, 0, 0, 1) Bedingung &lt;- factor(x = Bedingung, levels = c(0,1), labels = c(&quot;Kontrollgruppe&quot;, &quot;Experimentalgruppe&quot;)) # Hier wird überprüft, welche Versuchspersonen der Experimentalgruppe angehören Bedingung == &quot;Experimentalgruppe&quot; ## [1] FALSE TRUE TRUE FALSE TRUE FALSE FALSE TRUE 2.4.4 Rekodieren von Variablen mit Hilfe logischer Vergleich Sie werden logische Vergleiche häufig anwenden, um Daten zu rekodieren. Schauen Sie sich dazu die folgenden Beispiele an. Mit Hilfe logischer Vergleiche können Sie überprüfen, ob fehlende Werte nicht mit NA, sondern mit -9 kodiert wurden, um diese anschließend zu rekodieren. Testwerte &lt;- c(80, 57, 93, 85, 72, 65, -9) Testwerte == -9 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE TRUE Sie können das Ergebnis dieses logischen Vergleichs nun nutzen, um alle Werte, die als -9 kodiert wurden, zu rekodieren. Dazu speichern Sie das Ergebnis des logischen Vergleichs einfach in einer neuen Variable ab. fehlende_Werte &lt;- Testwerte == -9 Im nächsten Schritt benutzen Sie die neue erstellte Variable vom Typ logical, um alle Werte des Vektors Testwerte, die den Wert -9 haben, durch NA zu ersetzen. Testwerte[fehlende_Werte] &lt;- NA # Hier wurde der Werte -9 durch NA ersetzt: Testwerte ## [1] 80 57 93 85 72 65 NA Ganz ähnlich können Sie bei einem Reaktionszeitexperiment alle Trials entfernen, in denen Versuchspersonen sehr lange mit ihrer Reaktion gebraucht haben, d.h. in denen sie möglicherweise mit ihrer Aufmerksamkeit abgeschweift sind. # Als erstes werden 1000 Trials einer Versuchsperson simuliert RTs &lt;- rnorm(n = 1000, mean = 500, sd = 100) hist(RTs) # In diesem Vektor von Reaktionszeiten werden alle RTs, die länger als 700 ms sind, entfernt Ausreisser &lt;- RTs &gt; 700 RTs[Ausreisser] &lt;- NA hist(RTs) Für die ganz Eiligen: Sie können dies auch in einem einzigen Schritt durchführen, es ist dann aber fehleranfälliger. Dazu geben Sie den logischen Vergleich direkt als Index an: RTs &lt;- rnorm(n = 1000, mean = 500, sd = 100) # Hier wird der logische Vergleich direkt als Index von RTs genutzt. RTs[RTs &gt; 700] &lt;- NA Alternativ könnten Sie Extremwerte natürlich durch einen sinnvollen Maximalwert ersetzen. Beispielsweise lassen sich Reaktionszeiten, die länger als 700 ms sind, auf 700 ms deckeln. RTs &lt;- rnorm(n = 1000, mean = 500, sd = 100) # Hier wird der logische Vergleich direkt als Index von RTs genutzt. RTs[RTs &gt; 700] &lt;- 700 Sie können auch mehrere logische Vergleiche kombinieren. In Reaktionszeitexperimenten wollen Sie meist extrem langsame sowie extrem schnelle Durchgänge ausschließen, weil Sie nicht sicher sein können, ob die Versuchspersonen vorschnell reagiert haben (extrem schnelsl) oder mit ihren Gedanken nicht bei der Sache waren (extrem langsam). Dazu können Sie mehrere logische Vergleiche kombinieren. # Als erstes werden 1000 Trials einer Versuchsperson simuliert RTs &lt;- rnorm(n = 1000, mean = 500, sd = 100) # Dann werden untere und obere Grenzen als Variablen definiert. Dies hat den # Vorteil, dass Sie einfach diese Variablen im Code anpassen können, wenn Sie # die Kriterien zur Ausreißeranalyse anpassen möchten. untere_Grenze &lt;- 300 obere_Grenze &lt;- 700 # In diesem Vektor von Reaktionszeiten werden alle RTs, die schneller als 200 ms # oder länger als 700 ms sind, entfernt. Dazu wird der logische ODER-Operator # benötigt; es sollen solche Trials identifiziert werden, die &lt; 300 ms ODER # &gt; 700 ms sind. Ausreisser &lt;- (RTs &gt; obere_Grenze | RTs &lt; untere_Grenze) RTs[Ausreisser] &lt;- NA # Im Histogramm ist zu sehen, dass sowohl sehr schnelle als auch sehr langsame # Trials aus den Daten entfernt wurden. hist(RTs) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
